name: CI/CD Pipeline

# Only run on the master branch or on open PRs
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review

concurrency:
  group: pipeline-slackparser-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tidy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Go Mod Tidy
        run: |
          go mod tidy
          diff=$(git diff --color -- go.mod)

          if [[ -z "${diff}" ]]; then
          printf "\e[32m%s\e[0m\n" \
            "Go module is tidy!"
          else
            echo "${diff}"
            printf "\n\e[31m%s\e[0m\n\n%s\n" \
              "Go module is untidy!" \
              'Run `go mod tidy` to update it.'
            exit 1
          fi
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Lint
        run: |
          go install github.com/mgechev/revive@v1.2.1
          revive -config revive.toml ./...
          exit $?
  vet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Install Dependencies
        run: go mod download
      - name: Go Vet
        run: go vet $(go list ./...)
  fieldalignment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.19"
      - name: Go Field Alignment
        run: |
          go install golang.org/x/tools/go/analysis/passes/fieldalignment/cmd/fieldalignment@latest
          fieldalignment $(go list ./...)
          exit $?
  test:
    env:
      IS_TEST: true
    strategy:
      fail-fast: false
      matrix:
        go: [1.18.x, 1.19.x, 1.20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Install Dependencies
        run: go mod download
      - name: Go Test
        run: go test -short -race -shuffle=on $(go list ./...)
